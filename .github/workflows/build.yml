# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Bazel-Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY_NAME: "evydcontainers"
  CLUSTER_NAME: "aks-dev"
  CLUSTER_RESOURCE_GROUP: "evyd-dev-aks"
  NAMESPACE: "default"
  APP_NAME: "bazel-java"
  SECRET: "az-secret"
  SONAR_HOST_URL: "http://sonarqube-evyd.southeastasia.cloudapp.azure.com/"
  # scan-report-path: 'report'

jobs:
  build:
#    runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "~/.cache/bazel"
        key: bazel
#     - run: bazel build //:...

    - run: bazel build //:ProjectRunner
    - name: Prepare Image
      run: |
        mkdir image
        cp Dockerfile image/
        cp bazel-bin/ProjectRunner.jar image/

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}


    - name: Azure Container Registry Auth
      uses: azure/docker-login@v1
      with:
        login-server: evydcontainers.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
      
    - name: Azure build 
      working-directory: ./image
      run: docker build -t evydcontainers.azurecr.io/bazel-java:${{ github.sha }} .

    - name: Container Scanning
      uses: Azure/container-scan@v0
      id: container-scan
      continue-on-error: true
      with:
       image-name: evydcontainers.azurecr.io/bazel-java:${{ github.sha }}

    - name: Azure Push 
      working-directory: ./image
      run: docker push evydcontainers.azurecr.io/bazel-java:${{ github.sha }}
   
    - name: Post logs to appinsights
      uses: Azure/publish-security-assessments@v0
      with: 
        scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
        connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
        subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }} 
        
    # - name: CIS Results
      # run: echo ${{ steps.container-scan.outputs.scan-report-path }}
      # run: cat /home/runner/work/bazel-java/bazel-java/_temp/containerscan_1640251153114/scanreport.json

    # Set the target Azure Kubernetes Service (AKS) cluster.
    - name: Azure K8s Auth 
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    # - run: |
    #     kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    # Delete deployment
    - name: clean previous deployment (if any)
      run: kubectl delete -f manifests/job.yml | true
    
    # Create image pull secret for ACR
    - name: Azure K8s Secret
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.ACR_USERNAME }}
        container-registry-password: ${{ secrets.ACR_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        # force: true
    
    # Deploy app to AKS
    - name: Azure K8s Deploy
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/job.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}

  # scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

